// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/05/2022 15:35:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ex04
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ex04_vlg_sample_tst(
	A,
	B,
	C,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ex04_vlg_check_tst (
	F,
	F1,
	F2,
	F3,
	sampler_rx
);
input  F;
input  F1;
input  F2;
input  F3;
input sampler_rx;

reg  F_expected;
reg  F1_expected;
reg  F2_expected;
reg  F3_expected;

reg  F_prev;
reg  F1_prev;
reg  F2_prev;
reg  F3_prev;

reg  F_expected_prev;
reg  F1_expected_prev;
reg  F2_expected_prev;
reg  F3_expected_prev;

reg  last_F_exp;
reg  last_F1_exp;
reg  last_F2_exp;
reg  last_F3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	F_prev = F;
	F1_prev = F1;
	F2_prev = F2;
	F3_prev = F3;
end

// update expected /o prevs

always @(trigger)
begin
	F_expected_prev = F_expected;
	F1_expected_prev = F1_expected;
	F2_expected_prev = F2_expected;
	F3_expected_prev = F3_expected;
end



// expected F
initial
begin
	F_expected = 1'bX;
end 

// expected F1
initial
begin
	F1_expected = 1'bX;
end 

// expected F2
initial
begin
	F2_expected = 1'bX;
end 

// expected F3
initial
begin
	F3_expected = 1'bX;
end 
// generate trigger
always @(F_expected or F or F1_expected or F1 or F2_expected or F2 or F3_expected or F3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected F = %b | expected F1 = %b | expected F2 = %b | expected F3 = %b | ",F_expected_prev,F1_expected_prev,F2_expected_prev,F3_expected_prev);
	$display("| real F = %b | real F1 = %b | real F2 = %b | real F3 = %b | ",F_prev,F1_prev,F2_prev,F3_prev);
`endif
	if (
		( F_expected_prev !== 1'bx ) && ( F_prev !== F_expected_prev )
		&& ((F_expected_prev !== last_F_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_exp = F_expected_prev;
	end
	if (
		( F1_expected_prev !== 1'bx ) && ( F1_prev !== F1_expected_prev )
		&& ((F1_expected_prev !== last_F1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp = F1_expected_prev;
	end
	if (
		( F2_expected_prev !== 1'bx ) && ( F2_prev !== F2_expected_prev )
		&& ((F2_expected_prev !== last_F2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F2_expected_prev);
		$display ("     Real value = %b", F2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_F2_exp = F2_expected_prev;
	end
	if (
		( F3_expected_prev !== 1'bx ) && ( F3_prev !== F3_expected_prev )
		&& ((F3_expected_prev !== last_F3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F3_expected_prev);
		$display ("     Real value = %b", F3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_F3_exp = F3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ex04_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
// wires                                               
wire F;
wire F1;
wire F2;
wire F3;

wire sampler;                             

// assign statements (if any)                          
ex04 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.F(F),
	.F1(F1),
	.F2(F2),
	.F3(F3)
);

// A
initial
begin
	A = 1'b1;
	A = #80000 1'b0;
	A = #80000 1'b1;
	A = #80000 1'b0;
	A = #80000 1'b1;
	A = #80000 1'b0;
end 

// B
initial
begin
	B = 1'b1;
	B = #80000 1'b0;
	B = #160000 1'b1;
	B = #160000 1'b0;
end 

// C
initial
begin
	C = 1'b1;
	C = #80000 1'b0;
	C = #80000 1'b1;
	C = #160000 1'b0;
end 

// D
initial
begin
	D = 1'b0;
	D = #70000 1'b1;
	D = #90000 1'b0;
	D = #80000 1'b1;
	D = #160000 1'b0;
end 

ex04_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.sampler_tx(sampler)
);

ex04_vlg_check_tst tb_out(
	.F(F),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.sampler_rx(sampler)
);
endmodule

